// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: mapreduce.proto

package mrpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for job type (currently supporting word count and inverted index)
type JobType int32

const (
	JobType_WORDCOUNT     JobType = 0
	JobType_INVERTEDINDEX JobType = 1
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "WORDCOUNT",
		1: "INVERTEDINDEX",
	}
	JobType_value = map[string]int32{
		"WORDCOUNT":     0,
		"INVERTEDINDEX": 1,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreduce_proto_enumTypes[0].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_mapreduce_proto_enumTypes[0]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{0}
}

// Basic worker identification
type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_mapreduce_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

// Map task assignment message
type MapTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	InputFile     string                 `protobuf:"bytes,2,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	JobType       JobType                `protobuf:"varint,3,opt,name=job_type,json=jobType,proto3,enum=mr.JobType" json:"job_type,omitempty"`
	NumReduce     int32                  `protobuf:"varint,4,opt,name=num_reduce,json=numReduce,proto3" json:"num_reduce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapTask) Reset() {
	*x = MapTask{}
	mi := &file_mapreduce_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTask) ProtoMessage() {}

func (x *MapTask) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTask.ProtoReflect.Descriptor instead.
func (*MapTask) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{1}
}

func (x *MapTask) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *MapTask) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

func (x *MapTask) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_WORDCOUNT
}

func (x *MapTask) GetNumReduce() int32 {
	if x != nil {
		return x.NumReduce
	}
	return 0
}

// Request a map task from the master
type MapTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *WorkerInfo            `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapTaskRequest) Reset() {
	*x = MapTaskRequest{}
	mi := &file_mapreduce_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTaskRequest) ProtoMessage() {}

func (x *MapTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTaskRequest.ProtoReflect.Descriptor instead.
func (*MapTaskRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{2}
}

func (x *MapTaskRequest) GetWorker() *WorkerInfo {
	if x != nil {
		return x.Worker
	}
	return nil
}

// Response for a map task request
type MapTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Assigned      bool                   `protobuf:"varint,1,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Task          *MapTask               `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapTaskResponse) Reset() {
	*x = MapTaskResponse{}
	mi := &file_mapreduce_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTaskResponse) ProtoMessage() {}

func (x *MapTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTaskResponse.ProtoReflect.Descriptor instead.
func (*MapTaskResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{3}
}

func (x *MapTaskResponse) GetAssigned() bool {
	if x != nil {
		return x.Assigned
	}
	return false
}

func (x *MapTaskResponse) GetTask() *MapTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// Worker reports completion of a map task
type ReportMapTaskRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	WorkerId string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	TaskId   int32                  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// List of intermediate file names produced by the map task; each corresponds to one reduce partition.
	IntermediateFiles []string `protobuf:"bytes,3,rep,name=intermediate_files,json=intermediateFiles,proto3" json:"intermediate_files,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReportMapTaskRequest) Reset() {
	*x = ReportMapTaskRequest{}
	mi := &file_mapreduce_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportMapTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMapTaskRequest) ProtoMessage() {}

func (x *ReportMapTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMapTaskRequest.ProtoReflect.Descriptor instead.
func (*ReportMapTaskRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{4}
}

func (x *ReportMapTaskRequest) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *ReportMapTaskRequest) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReportMapTaskRequest) GetIntermediateFiles() []string {
	if x != nil {
		return x.IntermediateFiles
	}
	return nil
}

type ReportMapTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportMapTaskResponse) Reset() {
	*x = ReportMapTaskResponse{}
	mi := &file_mapreduce_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportMapTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMapTaskResponse) ProtoMessage() {}

func (x *ReportMapTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMapTaskResponse.ProtoReflect.Descriptor instead.
func (*ReportMapTaskResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{5}
}

func (x *ReportMapTaskResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Reduce task assignment message
type ReduceTask struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TaskId      int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ReduceIndex int32                  `protobuf:"varint,2,opt,name=reduce_index,json=reduceIndex,proto3" json:"reduce_index,omitempty"`
	// List of intermediate file names from all map tasks for this reduce partition.
	IntermediateFiles []string `protobuf:"bytes,3,rep,name=intermediate_files,json=intermediateFiles,proto3" json:"intermediate_files,omitempty"`
	JobType           JobType  `protobuf:"varint,4,opt,name=job_type,json=jobType,proto3,enum=mr.JobType" json:"job_type,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReduceTask) Reset() {
	*x = ReduceTask{}
	mi := &file_mapreduce_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReduceTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceTask) ProtoMessage() {}

func (x *ReduceTask) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceTask.ProtoReflect.Descriptor instead.
func (*ReduceTask) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{6}
}

func (x *ReduceTask) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReduceTask) GetReduceIndex() int32 {
	if x != nil {
		return x.ReduceIndex
	}
	return 0
}

func (x *ReduceTask) GetIntermediateFiles() []string {
	if x != nil {
		return x.IntermediateFiles
	}
	return nil
}

func (x *ReduceTask) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_WORDCOUNT
}

// Request a reduce task from the master
type ReduceTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *WorkerInfo            `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReduceTaskRequest) Reset() {
	*x = ReduceTaskRequest{}
	mi := &file_mapreduce_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReduceTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceTaskRequest) ProtoMessage() {}

func (x *ReduceTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceTaskRequest.ProtoReflect.Descriptor instead.
func (*ReduceTaskRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{7}
}

func (x *ReduceTaskRequest) GetWorker() *WorkerInfo {
	if x != nil {
		return x.Worker
	}
	return nil
}

// Response for a reduce task request
type ReduceTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Assigned      bool                   `protobuf:"varint,1,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Task          *ReduceTask            `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReduceTaskResponse) Reset() {
	*x = ReduceTaskResponse{}
	mi := &file_mapreduce_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReduceTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceTaskResponse) ProtoMessage() {}

func (x *ReduceTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceTaskResponse.ProtoReflect.Descriptor instead.
func (*ReduceTaskResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{8}
}

func (x *ReduceTaskResponse) GetAssigned() bool {
	if x != nil {
		return x.Assigned
	}
	return false
}

func (x *ReduceTaskResponse) GetTask() *ReduceTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// Worker reports completion of a reduce task
type ReportReduceTaskRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	WorkerId string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	TaskId   int32                  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Final output file produced by the reduce task.
	OutputFile    string `protobuf:"bytes,3,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportReduceTaskRequest) Reset() {
	*x = ReportReduceTaskRequest{}
	mi := &file_mapreduce_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportReduceTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportReduceTaskRequest) ProtoMessage() {}

func (x *ReportReduceTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportReduceTaskRequest.ProtoReflect.Descriptor instead.
func (*ReportReduceTaskRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{9}
}

func (x *ReportReduceTaskRequest) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *ReportReduceTaskRequest) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReportReduceTaskRequest) GetOutputFile() string {
	if x != nil {
		return x.OutputFile
	}
	return ""
}

type ReportReduceTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportReduceTaskResponse) Reset() {
	*x = ReportReduceTaskResponse{}
	mi := &file_mapreduce_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportReduceTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportReduceTaskResponse) ProtoMessage() {}

func (x *ReportReduceTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportReduceTaskResponse.ProtoReflect.Descriptor instead.
func (*ReportReduceTaskResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{10}
}

func (x *ReportReduceTaskResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_mapreduce_proto protoreflect.FileDescriptor

var file_mapreduce_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x6d, 0x72, 0x22, 0x29, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6d, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x7b, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x6d, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6a, 0x6f,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x22, 0x54, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x70, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x2b,
	0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52,
	0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x45,
	0x52, 0x54, 0x45, 0x44, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x01, 0x32, 0xa3, 0x02, 0x0a, 0x0d,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x12, 0x2e, 0x6d, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x6d, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x6d, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x72, 0x2e,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x6d, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x69, 0x73, 0x68, 0x6e, 0x75, 0x31, 0x39, 0x31, 0x30, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x67, 0x6f, 0x2f, 0x71, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2f, 0x6d, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_mapreduce_proto_rawDescOnce sync.Once
	file_mapreduce_proto_rawDescData []byte
)

func file_mapreduce_proto_rawDescGZIP() []byte {
	file_mapreduce_proto_rawDescOnce.Do(func() {
		file_mapreduce_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mapreduce_proto_rawDesc), len(file_mapreduce_proto_rawDesc)))
	})
	return file_mapreduce_proto_rawDescData
}

var file_mapreduce_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mapreduce_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_mapreduce_proto_goTypes = []any{
	(JobType)(0),                     // 0: mr.JobType
	(*WorkerInfo)(nil),               // 1: mr.WorkerInfo
	(*MapTask)(nil),                  // 2: mr.MapTask
	(*MapTaskRequest)(nil),           // 3: mr.MapTaskRequest
	(*MapTaskResponse)(nil),          // 4: mr.MapTaskResponse
	(*ReportMapTaskRequest)(nil),     // 5: mr.ReportMapTaskRequest
	(*ReportMapTaskResponse)(nil),    // 6: mr.ReportMapTaskResponse
	(*ReduceTask)(nil),               // 7: mr.ReduceTask
	(*ReduceTaskRequest)(nil),        // 8: mr.ReduceTaskRequest
	(*ReduceTaskResponse)(nil),       // 9: mr.ReduceTaskResponse
	(*ReportReduceTaskRequest)(nil),  // 10: mr.ReportReduceTaskRequest
	(*ReportReduceTaskResponse)(nil), // 11: mr.ReportReduceTaskResponse
}
var file_mapreduce_proto_depIdxs = []int32{
	0,  // 0: mr.MapTask.job_type:type_name -> mr.JobType
	1,  // 1: mr.MapTaskRequest.worker:type_name -> mr.WorkerInfo
	2,  // 2: mr.MapTaskResponse.task:type_name -> mr.MapTask
	0,  // 3: mr.ReduceTask.job_type:type_name -> mr.JobType
	1,  // 4: mr.ReduceTaskRequest.worker:type_name -> mr.WorkerInfo
	7,  // 5: mr.ReduceTaskResponse.task:type_name -> mr.ReduceTask
	3,  // 6: mr.MasterService.RequestMapTask:input_type -> mr.MapTaskRequest
	5,  // 7: mr.MasterService.ReportMapTask:input_type -> mr.ReportMapTaskRequest
	8,  // 8: mr.MasterService.RequestReduceTask:input_type -> mr.ReduceTaskRequest
	10, // 9: mr.MasterService.ReportReduceTask:input_type -> mr.ReportReduceTaskRequest
	4,  // 10: mr.MasterService.RequestMapTask:output_type -> mr.MapTaskResponse
	6,  // 11: mr.MasterService.ReportMapTask:output_type -> mr.ReportMapTaskResponse
	9,  // 12: mr.MasterService.RequestReduceTask:output_type -> mr.ReduceTaskResponse
	11, // 13: mr.MasterService.ReportReduceTask:output_type -> mr.ReportReduceTaskResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_mapreduce_proto_init() }
func file_mapreduce_proto_init() {
	if File_mapreduce_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mapreduce_proto_rawDesc), len(file_mapreduce_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mapreduce_proto_goTypes,
		DependencyIndexes: file_mapreduce_proto_depIdxs,
		EnumInfos:         file_mapreduce_proto_enumTypes,
		MessageInfos:      file_mapreduce_proto_msgTypes,
	}.Build()
	File_mapreduce_proto = out.File
	file_mapreduce_proto_goTypes = nil
	file_mapreduce_proto_depIdxs = nil
}
