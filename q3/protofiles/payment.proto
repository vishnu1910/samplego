syntax = "proto3";
package payment;

option go_package = "./paymentpb";

service PaymentGateway {
  // Process a payment from one bank to another.
  rpc ProcessPayment (PaymentRequest) returns (PaymentResponse) {}
  // For simplicity, clients can register with the gateway.
  rpc RegisterClient (ClientRegistration) returns (RegistrationResponse) {}
}

service Bank {
  // Vote on a transaction (phase 1 of 2PC).
  rpc VoteCommit (VoteRequest) returns (VoteResponse) {}
  // Commit a transaction (phase 2 of 2PC).
  rpc Commit (CommitRequest) returns (CommitResponse) {}
  // Rollback a transaction.
  rpc Rollback (RollbackRequest) returns (RollbackResponse) {}
}

message PaymentRequest {
  string client_id = 1;
  string from_bank = 2;
  string to_bank = 3;
  double amount = 4;
  // Idempotency key to ensure exactly-once semantics.
  string idempotency_key = 5;
}

message PaymentResponse {
  bool success = 1;
  string message = 2;
}

message ClientRegistration {
  string client_id = 1;
  string username = 2;
  string password = 3;
  string bank = 4;
  double initial_balance = 5;
}

message RegistrationResponse {
  bool success = 1;
  string message = 2;
}

message VoteRequest {
  string transaction_id = 1;
  string client_id = 2;
  double amount = 3;
}

message VoteResponse {
  bool vote = 1;
  string message = 2;
}

message CommitRequest {
  string transaction_id = 1;
}

message CommitResponse {
  bool success = 1;
  string message = 2;
}

message RollbackRequest {
  string transaction_id = 1;
}

message RollbackResponse {
  bool success = 1;
  string message = 2;
}


